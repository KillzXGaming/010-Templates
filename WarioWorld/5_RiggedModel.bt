//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
struct File{
struct PacketEntry;
struct ShapeEntry;
struct DrawElement;
struct DrawList;
struct Vertex;

BigEndian();

struct Header
{
    uint positionsOffset;
    uint normalsOffset;
    uint colorsOffset;
    uint texCoordsOffset;
    uint materialColorsOffset;
    uint textureContainerOffset;
    uint drawElementCount;
    uint drawElementsOffset;
    uint shapeCount;
    uint shapesOffset;
    uint packetCount;
    uint packetsOffset;

    FSeek(materialColorsOffset * 4);
     byte color[4];

    FSeek(textureContainerOffset * 4);
    byte textureData[576];

    FSeek(drawElementsOffset * 4);
    DrawElement elements[drawElementCount];

    FSeek(shapesOffset * 4);
    ShapeEntry shapes[shapeCount];

    FSeek(packetsOffset * 4);
    PacketEntry packets[packetCount] <optimize=false>;
}header <bgcolor=0xCDE6FF>;


typedef struct
{
    uint offset;
    uint size;
    byte flags1;
    byte flags2;
    byte flags3;
    byte materialIndex;

    local uint pos <format=hex> = FTell();

    FSeek(offset * 4);
    while (FTell() < offset * 4 + size)
    {
         byte opCode <hidden=true>;
         if (opCode == 0)
             continue;

        DrawList drawList;
    }
    FSeek(pos);
} PacketEntry ;

typedef struct
{
    uint packetCount;
    uint packetOffset;
} ShapeEntry ;

typedef struct
{
    uint packetCount;
    uint packetOffset;
} DrawElement;

typedef struct
{
    ushort numVertices;
    Vertex vertices[numVertices]<optimize=false>;
    
} DrawList;

typedef struct
{
    //if (flags2 != 3 && flags2 != 15)
    //   ubyte MatrixIndex;

    if (flags2 == 19)
    {
    byte unk;
    byte unk;
    byte unk;

    }
    ushort PositionIndex;
    ushort NormalIndex;

    if (flags2 == 16 || flags2 == 17 || flags2 == 19)
    {
    ushort tangent;
    ushort bitangent;
    }

    if (flags2 == 10 || flags2 == 15)
    {
    ushort bitangent;
    }

    //ushort ColorIndex;
    if (texCoordsOffset != 0)
          ushort TexCoordIndex;

    local uint pos <format=hex> = FTell();

    FSeek((positionsOffset * 4) + (PositionIndex * 6));
    short positions[3];

    FSeek((normalsOffset * 4) + (NormalIndex * 6));
    short normals[3];

    if (texCoordsOffset != 0)
    {
    FSeek((texCoordsOffset * 4) + (TexCoordIndex * 4));
    short texCoords[2];
    }
    FSeek(pos);
} Vertex;

}file;